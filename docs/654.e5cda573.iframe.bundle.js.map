{"version":3,"file":"654.e5cda573.iframe.bundle.js","mappings":";;AAgfA;;;;;;;AAOA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApdA;;ACuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@objekt/web-components/../../components/obj-text-field.ts","webpack://@objekt/web-components/../../stories/obj-text-field.template.ts"],"sourcesContent":["import { html, css, LitElement, TemplateResult } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { ClassInfo, classMap } from 'lit/directives/class-map.js';\n\n/**\n * A multi-variant text input component.\n * \n * ðŸ’¡ **Demo**:\n * [Stack](https://objektlabs.github.io/web-components/?path=/docs/components-text-field-stack--docs) |\n * [Outline](https://objektlabs.github.io/web-components/?path=/docs/components-text-field-outline--docs) |\n * [Inline](https://objektlabs.github.io/web-components/?path=/docs/components-text-field-inline--docs) |\n * [Filled](https://objektlabs.github.io/web-components/?path=/docs/components-text-field-filled--docs) |\n * [Clear](https://objektlabs.github.io/web-components/?path=/docs/components-text-field-clear--docs)\n * \n * ## Installation\n * ```sh\n * npm install @objekt/obj-text-field\n * ```\n * \n * @example\n *\n * ```html\n * Primary:\n * \n * <obj-text-field label=\"Username\"></obj-text-field>\n * ```\n * \n * @element obj-text-field\n * \n * @property {string} [type] - The text field variant type, e.g. stack, outline, inline, filled, or clear.\n * @property {string} [label] - The text field display label.\n * @property {string} [value] - The value entered into the text field.\n * @property {string} [placeholder] - The default text to display in the text field when the value is not set.\n * @property {string} [message] - A guide message to show under the text field.\n * \n * @property {boolean} [error] - Set to place the component in an error state.\n * @property {boolean} [invert] - Set to invert the component colors for rendering on dark backgrounds.\n * @property {boolean} [disabled] - Sets to place the component in an disabled state.\n * \n * @fires {CustomEvent} value-changed - Dispatched when the text in entered into the field.\n */\n@customElement('obj-text-field')\nexport class TextField extends LitElement {\n\n\t@property({ type: String, reflect: true }) type?: 'stack' | 'inline' | 'outline' | 'clear' | 'filled';\n\t@property({ type: String, reflect: true }) label?: string;\n\t@property({ type: String, reflect: true }) value?: string;\n\t@property({ type: String, reflect: true }) placeholder?: string;\n\t@property({ type: String, reflect: true }) message?: string;\n\n\t@property({ type: Boolean, reflect: true }) error?: boolean;\n\t@property({ type: Boolean, reflect: true }) invert?: boolean;\n\t@property({ type: Boolean, reflect: true }) disabled?: boolean;\n\n\t// ------------\n\t// CONSTRUCTORS\n\t// ------------\n\n\t/**\n\t * Initialise the component.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\t}\n\n\t// ------------------\n\t// LIFECYCLE HANDLERS\n\t// ------------------\n\n\t// n/a\n\n\t// ----------------\n\t// PUBLIC FUNCTIONS\n\t// ----------------\n\n\t// n/a\n\n\t// --------------\n\t// EVENT HANDLERS\n\t// --------------\n\n\tprivate handleInput(e: InputEvent): void {\n\n\t\tthis.value = (<HTMLInputElement>e?.target).value || undefined;\n\n\t\tthis.dispatchEvent(new CustomEvent('value-changed', {\n\t\t\tdetail: this.value,\n\t\t\tbubbles: true,\n\t\t\tcomposed: true\n\t\t}));\n\t}\n\n\t// ----------------\n\t// HELPER FUNCTIONS\n\t// ----------------\n\n\t// n/a\n\n\t// -------------------\n\t// RENDERING TEMPLATES\n\t// -------------------\n\n\t/**\n\t * The element style template.\n\t * \n\t * @type {CSSResultGroup}\n\t */\n\tstatic override styles = [\n\t\tcss`\n\t\t\t/* HOST */\n\n\t\t\t:host {\n\t\t\t\tdisplay: inline-flex;\n\t\t\t}\n\n\t\t\t.container {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t\talign-items: stretch;\n\t\t\t\tjustify-content: flex-start;\n\n\t\t\t\twidth: 100%;\n\n\t\t\t\tfont-family: var(--obj-input-font-family, Arial);\n\t\t\t}\n\n\t\t\t/* TOUCH ZONE */\n\n\t\t\t.touch-zone {\n\t\t\t\tposition: relative;\n\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column-reverse;\n\t\t\t\talign-items: flex-start;\n\t\t\t\tjustify-content: center;\n\n\t\t\t\tpadding: var(--obj-input-padding-y, 10px) var(--obj-input-padding-x, 10px);\n\t\t\t}\n\n\t\t\t.touch-zone > input {\n\t\t\t\tfont-size: var(--obj-input-font-size, 14px);\n\t\t\t\tfont-weight: var(--obj-input-font-weight, normal);\n\n\t\t\t\tcolor: var(--obj-input-font-color, black);\n\t\t\t\tbackground-color: transparent;\n\n\t\t\t\ttext-align: var(--obj-input-text-align, left);\n\n\t\t\t\tborder: none;\n\t\t\t\toutline: none;\n\t\t\t\tpadding: 0px;\n\t\t\t\tmargin: 0px;\n\t\t\t}\n\n\t\t\t:host([value]) .touch-zone > .label,\n\t\t\t:host([placeholder]) .touch-zone > .label,\n\t\t\t.touch-zone > input:focus + .label {\n\t\t\t\tcolor: var(--obj-input-focus-label-font-color, black);\n\t\t\t}\n\n\t\t\t.touch-zone > .label {\n\t\t\t\tposition: absolute;\n\n\t\t\t\ttop: 50%;\n\t\t\t\ttransform: translateY(-50%);\n\t\t\t\ttransform-origin: top var(--obj-input-text-align, left);\n\n\t\t\t\ttransition: all 150ms ease 0s;\n\n\t\t\t\tpointer-events: none;\n\t\t\t\tuser-select: none;\n\n\t\t\t\tpadding: 0px;\n\t\t\t\tmargin: 0px;\n\n\t\t\t\theight: var(--obj-input-label-font-size, 14px);\n\t\t\t\tline-height: 100%;\n\n\t\t\t\tfont-size: var(--obj-input-label-font-size, 14px);\n\t\t\t\tfont-weight: var(--obj-input-label-font-weight, normal);\n\n\t\t\t\tcolor: var(--obj-input-label-font-color, black);\n\n\t\t\t\ttext-align: var(--obj-input-text-align, left);\n\t\t\t\n\t\t\t\tleft: var(--obj-input-padding-x);\n\t\t\t\tright: var(--obj-input-padding-x);\n\t\t\t}\n\n\t\t\t.touch-zone > .label > span {\n\t\t\t\tposition: relative;\n\t\t\t}\n\n\t\t\t.touch-zone > .border {\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 0px;\n\t\t\t\tbottom: 0px;\n\t\t\t\tleft: 0px;\n\t\t\t\tright: 0px;\n\n\t\t\t\tz-index: -1;\n\n\t\t\t\tbackground: var(--obj-input-background, white);\n\n\t\t\t\tborder-radius: var(--obj-input-border-radius, 0px);\n\n\t\t\t\tborder-top: var(--obj-input-border, 1px solid grey);\n\t\t\t\tborder-bottom: var(--obj-input-border, 1px solid grey);\n\t\t\t\tborder-left: var(--obj-input-border, 1px solid grey);\n\t\t\t\tborder-right: var(--obj-input-border, 1px solid grey);\n\t\t\t}\n\n\t\t\t/* TYPE - STACK */\n\n\t\t\t.type-stack .touch-zone {\n\t\t\t\tpadding-left: 0px;\n\t\t\t\tpadding-right: 0px;\n\t\t\t}\n\n\t\t\t.type-stack .touch-zone > .border {\n\t\t\t\ttop: var(--obj-input-line-gap, 10px);\n\t\t\t\tmargin-top: var(--obj-input-label-font-size, 14px);\n\t\t\t}\n\n\t\t\t.type-stack .touch-zone > .label {\n\t\t\t\tposition: relative;\n\n\t\t\t\ttop: 0px;\n\t\t\t\ttransform: translateY(-37.5%) scale(75%);\n\n\t\t\t\tleft: 0px;\n\t\t\t\tright: 0px;\n\t\t\t\twidth: 100%;\n\t\t\t}\n\n\t\t\t:host([label]) .type-stack .touch-zone > input {\n\t\t\t\tmargin-top: var(--obj-input-line-gap, 10px);\n\t\t\t\tpadding-left: var(--obj-input-padding-x, 10px);\n\t\t\t\tpadding-right: var(--obj-input-padding-x, 10px);\n\t\t\t}\n\n\t\t\t/* TYPE - OUTLINE */\n\n\t\t\t:host([value]) .type-outline .touch-zone > .label,\n\t\t\t:host([placeholder]) .type-outline .touch-zone > .label,\n\t\t\t.type-outline .touch-zone > input:focus + .label {\n\t\t\t\ttop: 0px;\n\t\t\t\ttransform: translateY(-37.5%) scale(75%);\n\t\t\t}\n\n\t\t\t:host([value]) .type-outline .touch-zone > .label > span::before,\n\t\t\t:host([placeholder]) .type-outline .touch-zone > .label > span::before,\n\t\t\t.type-outline .touch-zone > input:focus + .label > span::before {\n\t\t\t\tcontent: \"\";\n\t\t\t\tdisplay: block;\n\t\t\t\theight: 100%;\n\t\t\t\tbackground-color: var(--obj-input-background, white);\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: -3px;\n\t\t\t\tright: -3px;\n\t\t\t\ttop: 50%;\n\t\t\t\theight: 50%;\n\t\t\t\tz-index: -1;\n\t\t\t}\n\n\t\t\t/* TYPE - INLINE */\n\n\t\t\t:host([value]) .type-inline .touch-zone > .label,\n\t\t\t:host([placeholder]) .type-inline .touch-zone > .label,\n\t\t\t.type-inline .touch-zone > input:focus + .label {\n\t\t\t\ttop: var(--obj-input-padding-y, 10px);\n\t\t\t\ttransform: translateY(0%) scale(75%);\n\t\t\t}\n\n\t\t\t:host([label]) .type-inline .touch-zone > input {\n\t\t\t\tmargin-top: var(--obj-input-label-font-size, 14px);\n\t\t\t}\n\n\t\t\t/* TYPE - FILLED */\n\n\t\t\t:host([value]) .type-filled .touch-zone > .label,\n\t\t\t:host([placeholder]) .type-filled .touch-zone > .label,\n\t\t\t.type-filled .touch-zone > input:focus + .label {\n\t\t\t\ttop: 0px;\n\t\t\t\ttransform: translateY(-37.5%) scale(75%);\n\t\t\t}\n\n\t\t\t.type-filled .touch-zone > .border {\n\t\t\t\tbackground-color: var(--obj-input-background, white);\n\n\t\t\t\tborder-radius: 0px;\n\t\t\t\t\n\t\t\t\tborder-top: none;\n\t\t\t\tborder-bottom: var(--obj-input-border, 1px solid grey);\n\t\t\t\tborder-left: none;\n\t\t\t\tborder-right: none;\n\t\t\t}\n\n\t\t\t/* TYPE - CLEAR */\n\n\t\t\t:host([value]) .type-clear .touch-zone > .label,\n\t\t\t:host([placeholder]) .type-clear .touch-zone > .label,\n\t\t\t.type-clear .touch-zone > input:focus + .label {\n\t\t\t\ttop: 0px;\n\t\t\t\ttransform: translateY(-37.5%) scale(75%);\n\t\t\t}\n\n\t\t\t.type-clear .touch-zone > .border {\n\t\t\t\tbackground-color: transparent;\n\n\t\t\t\tborder-radius: 0px;\n\t\t\t\t\n\t\t\t\tborder-top: none;\n\t\t\t\tborder-bottom: var(--obj-input-border, 1px solid grey);\n\t\t\t\tborder-left: none;\n\t\t\t\tborder-right: none;\n\t\t\t}\n\n\t\t\t/* MESSAGE */\n\n\t\t\t.message {\n\t\t\t\tfont-size: var(--obj-input-message-font-size, 12px);\n\t\t\t\tfont-weight: var(--obj-input-message-font-weight, normal);\n\n\t\t\t\ttext-align: var(--obj-input-text-align, left);\n\n\t\t\t\tcolor: var(--obj-input-message-font-color, black);\n\n\t\t\t\tpadding-top: var(--obj-input-line-gap, 10px);\n\t\t\t\tpadding-bottom: 0px;\n\t\t\t\tpadding-left: var(--obj-input-padding-x, 10px);\n\t\t\t\tpadding-right: var(--obj-input-padding-x, 10px);\n\t\t\t}\n\n\t\t\t/* ERROR */\n\n\t\t\t.error .touch-zone > .label {\n\t\t\t\tcolor: var(--obj-input-error-font-color, red) !important;\n\t\t\t}\n\n\t\t\t.error.type-stack .touch-zone > .border,\n\t\t\t.error.type-outline .touch-zone > .border,\n\t\t\t.error.type-inline .touch-zone > .border {\n\t\t\t\tbackground-color: var(--obj-input-error-background, white);\n\n\t\t\t\tborder-top: var(--obj-input-error-border, 1px solid red);\n\t\t\t\tborder-bottom: var(--obj-input-error-border, 1px solid red);\n\t\t\t\tborder-left: var(--obj-input-error-border, 1px solid red);\n\t\t\t\tborder-right: var(--obj-input-error-border, 1px solid red);\n\t\t\t}\n\t\t\t\n\t\t\t.error.type-filled .touch-zone > .border {\n\t\t\t\tbackground-color: var(--obj-input-error-background, white);\n\n\t\t\t\tborder-bottom: var(--obj-input-error-border, 1px solid red);\n\t\t\t}\n\n\t\t\t.error.type-clear .touch-zone > .border {\n\t\t\t\tborder-bottom: var(--obj-input-error-border, 1px solid red);\n\t\t\t}\n\n\t\t\t.error .message {\n\t\t\t\tcolor: var(--obj-input-error-font-color, red) !important;\n\t\t\t}\n\n\t\t\t/* INVERT */\n\n\t\t\t.invert .touch-zone > input {\n\t\t\t\tcolor: var(--obj-input-invert-font-color, white) !important;\n\t\t\t}\n\n\t\t\t.invert .touch-zone > .label {\n\t\t\t\tcolor: var(--obj-input-invert-font-color, white) !important;\n\n\t\t\t\ttransition: none;\n\t\t\t}\n\n\t\t\t.invert.type-stack .touch-zone > .border,\n\t\t\t.invert.type-outline .touch-zone > .border,\n\t\t\t.invert.type-inline .touch-zone > .border {\n\t\t\t\tbackground-color: var(--obj-input-invert-background, transparent);\n\n\t\t\t\tborder-top: var(--obj-input-invert-border, 1px solid white);\n\t\t\t\tborder-bottom: var(--obj-input-invert-border, 1px solid white);\n\t\t\t\tborder-left: var(--obj-input-invert-border, 1px solid white);\n\t\t\t\tborder-right: var(--obj-input-invert-border, 1px solid white);\n\t\t\t}\n\n\t\t\t.invert.type-filled .touch-zone > .border {\n\t\t\t\tbackground-color: var(--obj-input-invert-background, transparent);\n\n\t\t\t\tborder-bottom: var(--obj-input-invert-border, 1px solid white);\n\t\t\t}\n\n\t\t\t.invert.type-clear .touch-zone > .border {\n\t\t\t\tborder-bottom: var(--obj-input-invert-border, 1px solid white);\n\t\t\t}\n\n\t\t\t.invert .message {\n\t\t\t\tcolor: var(--obj-input-invert-font-color, white) !important;\n\t\t\t}\n\n\t\t\t/* HOVER */\n\n\t\t\t.type-stack .touch-zone:hover > .border,\n\t\t\t.type-outline .touch-zone:hover > .border,\n\t\t\t.type-inline .touch-zone:hover > .border {\n\t\t\t\tbackground-color: var(--obj-input-hover-background, white);\n\t\t\t\t\n\t\t\t\tborder-top: var(--obj-input-hover-border, 1px solid grey);\n\t\t\t\tborder-bottom: var(--obj-input-hover-border, 1px solid grey);\n\t\t\t\tborder-left: var(--obj-input-hover-border, 1px solid grey);\n\t\t\t\tborder-right: var(--obj-input-hover-border, 1px solid grey);\n\t\t\t}\n\n\t\t\t.type-filled .touch-zone:hover > .border {\n\t\t\t\tbackground-color: var(--obj-input-hover-background, white);\n\n\t\t\t\tborder-bottom: var(--obj-input-hover-border, 1px solid grey);\n\t\t\t}\n\t\t\t\n\t\t\t.type-clear .touch-zone:hover > .border {\n\t\t\t\tborder-bottom: var(--obj-input-hover-border, 1px solid grey);\n\t\t\t}\n\n\t\t\t/** FOCUS */\n\n\t\t\t.type-stack .touch-zone:focus-within > .border,\n\t\t\t.type-outline .touch-zone:focus-within > .border,\n\t\t\t.type-inline .touch-zone:focus-within > .border {\n\t\t\t\tborder: var(--obj-input-focus-border, 1px solid black) !important;\n\t\t\t}\n\n\t\t\t.type-filled .touch-zone:focus-within > .border,\n\t\t\t.type-clear .touch-zone:focus-within > .border {\n\t\t\t\tborder-bottom: var(--obj-input-focus-border, 1px solid black) !important;\n\t\t\t}\n\n\t\t\t/* DISABLED */\n\n\t\t\t.disabled .touch-zone > input {\n\t\t\t\tcolor: var(--obj-input-disabled-font-color, lightgrey) !important;\n\t\t\t}\n\n\t\t\t.disabled .touch-zone > .label {\n\t\t\t\tcolor: var(--obj-input-disabled-font-color, lightgrey) !important;\n\n\t\t\t\ttransition: none;\n\t\t\t}\n\n\t\t\t.disabled.type-stack .touch-zone > .border,\n\t\t\t.disabled.type-outline .touch-zone > .border,\n\t\t\t.disabled.type-inline .touch-zone > .border {\n\t\t\t\tbackground-color: var(--obj-input-disabled-background, white);\n\n\t\t\t\tborder-top: var(--obj-input-disabled-border, 1px solid lightgrey);\n\t\t\t\tborder-bottom: var(--obj-input-disabled-border, 1px solid lightgrey);\n\t\t\t\tborder-left: var(--obj-input-disabled-border, 1px solid lightgrey);\n\t\t\t\tborder-right: var(--obj-input-disabled-border, 1px solid lightgrey);\n\t\t\t}\n\n\t\t\t.disabled.type-filled .touch-zone > .border {\n\t\t\t\tbackground-color: var(--obj-input-disabled-background, white);\n\n\t\t\t\tborder-bottom: var(--obj-input-disabled-border, 1px solid lightgrey);\n\t\t\t}\n\n\t\t\t.disabled.type-clear .touch-zone > .border {\n\t\t\t\tborder-bottom: var(--obj-input-disabled-border, 1px solid lightgrey);\n\t\t\t}\n\n\t\t\t.disabled .message {\n\t\t\t\tcolor: var(--obj-input-disabled-font-color, lightgrey) !important;\n\t\t\t}\n\t\t`\n\t];\n\n\t/**\n\t * Apply changes to the element DOM when a property value changes.\n\t * \n\t * @returns The updated DOM template.\n\t */\n\toverride render(): TemplateResult {\n\n\t\t// Calculate the state classes to apply to the component.\n\t\tconst classes: ClassInfo = {\n\t\t\t'container': true,\n\t\t\t['type-' + this.type ?? 'inline']: true,\n\t\t\t'error': this.error === true,\n\t\t\t'disabled': this.disabled === true,\n\t\t\t'invert': this.invert === true,\n\t\t};\n\n\t\t// Generate the component template.\n\t\treturn html`\n\t\t\t<div class=\"${classMap(classes)}\">\n\t\t\t\t<label class=\"touch-zone\">\n\t\t\t\t\t<div class=\"border\"></div>\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"input-field\"\n\t\t\t\t\t\tpart=\"input-field\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t.value=\"${this.value ?? ''}\"\n\t\t\t\t\t\t.placeholder=\"${this.placeholder ?? ''}\"\n\t\t\t\t\t\t?disabled=\"${this.disabled}\"\n\t\t\t\t\t\t@input=\"${(e: InputEvent) => this.handleInput(e)}\">\n\t\t\t\t\t${this.label ? html`<div class=\"label\"><span>${this.label}</span></div>` : html``}\n\t\t\t\t</label>\n\t\t\t\t${this.message ? html`<div class=\"message\">${this.message}</div>` : html``}\n\t\t\t</div>\n\t\t`;\n\t}\n}","\n\nimport { ArgTypes, Args, StoryObj, getCustomElements } from '@storybook/web-components';\n\nimport { action } from '@storybook/addon-actions';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport '../components/obj-text-field';\n\n/**\n * Generate the default controls template for the component from the configured storybook custom elements manifest.\n * \n * @param overrides The story level overrides to apply to the default template.\n * \n * @returns The component controls template.\n */\nexport const GenerateControlsFromManifest = (tagName: string, argTypes?: Partial<ArgTypes<Args>>): Partial<ArgTypes<Args>> => {\n\n\t// Extract the component custom element manifest details.\n\tconst manifest = getCustomElements() || [];\n\n\tlet cssParts: any[] = [];\n\tlet cssProperties: any[] = [];\n\tlet events: any[] = [];\n\n\tfor (const component of manifest.modules) {\n\n\t\tfor (const item of component.declarations) {\n\n\t\t\tif (item.tagName === tagName) {\n\n\t\t\t\tcssParts = item.cssParts || [];\n\t\t\t\tcssProperties = item.cssProperties || [];\n\t\t\t\tevents = item.events || [];\n\t\t\t}\n\t\t}\n\t}\n\n\t// Build up the basic controls list from the custom element manifest data.\n\treturn {\n\n\t\t// Remove CSS shadow parts from the controls list.\n\t\t...Object.fromEntries(\n\t\t\tcssParts.map(e => [e.name, {\n\t\t\t\tcontrol: { type: 'none' },\n\t\t\t\t// if: { arg: 'NONE', eq: 0 }\n\t\t\t}])\n\t\t),\n\n\t\t// Remove CSS properties parts from the controls list.\n\t\t...Object.fromEntries(\n\t\t\tcssProperties.map(e => [e.name, {\n\t\t\t\tcontrol: { type: 'none' },\n\t\t\t\t// if: { arg: 'NONE', eq: 0 }\n\t\t\t}])\n\t\t),\n\n\t\t// Remove events from the controls list.\n\t\t...Object.fromEntries(\n\t\t\tevents.map(e => [e.name, {\n\t\t\t\tcontrol: { type: 'none' },\n\t\t\t\t// if: { arg: 'NONE', eq: 0 }\n\t\t\t}])\n\t\t),\n\n\t\t// Include override controls.\n\t\t...argTypes\n\t};\n}\n\n/**\n * Generate the default controls template for the component.\n * \n * @param overrides The story level overrides to apply to the default template.\n * \n * @returns The component controls template.\n */\nexport const Controls = (argTypes?: Partial<ArgTypes<Args>>): Partial<ArgTypes<Args>> => {\n\n\tif (!argTypes) {\n\t\targTypes = {};\n\t}\n\n\treturn GenerateControlsFromManifest('obj-text-field', {\n\t\ttype: {\n\t\t\tcontrol: { type: 'radio' },\n\t\t\toptions: ['primary', 'secondary', 'clear']\n\t\t},\n\t\t...argTypes\n\t});\n}\n\n/**\n * Generate the default story template for the component.\n * \n * @param overrides The story level overrides to apply to the default template.\n * \n * @returns The component story template.\n */\nexport const Story = (story?: StoryObj): StoryObj => {\n\n\tif (!story) {\n\t\tstory = {};\n\t}\n\n\treturn {\n\t\t...story,\n\t\targs: {\n\t\t\ttype: 'inline',\n\t\t\tlabel: 'Hello World',\n\t\t\t...story.args\n\t\t},\n\t\trender: args => html`\n\t\t\t<obj-text-field\n\t\t\t\ttype=\"${args.type}\"\n\t\t\t\tlabel=\"${args.label}\"\n\t\t\t\tvalue=\"${ifDefined(args.value)}\"\n\t\t\t\tplaceholder=\"${ifDefined(args.placeholder)}\"\n\t\t\t\tmessage=\"${ifDefined(args.message)}\"\n\t\t\t\t?error=\"${args.error}\"\n\t\t\t\t?disabled=\"${args.disabled}\"\n\t\t\t\t?invert=\"${args.invert}\"\n\t\t\t\t@value-changed=\"${action('value-changed')}\"\n\t\t\t></obj-text-field>\n\t\t`\n\t};\n}"],"names":[],"sourceRoot":""}